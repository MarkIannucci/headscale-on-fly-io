name: Fly build and deploy

on:
  pull_request:
  push:
    branches:
    - main

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  FLY_APP_NAME: ${{ vars.FLY_APP_NAME }}
  FLY_PRIMARY_REGION: ${{ vars.FLY_PRIMARY_REGION }}
  FLY_REGIONS: ${{ vars.FLY_REGIONS }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY}}

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: markiannucci/flyctl-actions/setup-flyctl@main

      - id: update-app-name-for-prs
        if: github.event_name == 'pull_request'
        run: 
          echo "FLY_APP_NAME=${FLY_APP_NAME}-${{ github.event.number }}" >> $GITHUB_ENV

      - id: variable-substition
        run : |
          envsubst < fly.template.toml | tee fly.toml
          envsubst < config.template.yaml | tee config.yaml
          envsubst < ./terraform/terraform.tfvars.template | tee ./terraform/terraform.tfvars
      
      # terraform boilerplate stuff
      - id: tf-setup
        uses: hashicorp/setup-terraform@v2
      - id: tf-fmt
        run: terraform fmt -check
        working-directory: ./terraform
        continue-on-error: true
      - id: fix-tf-fmt
        if: steps.tf-fmt.outcome == 'failure'
        run: |
          git fetch origin ${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          terraform fmt
          git add .
          git commit -m "fix terraform format "
          git push
        working-directory: ./terraform
      - id: tf-init
        run: terraform init
        working-directory: ./terraform
      - id: tf-validate
        run: terraform validate -no-color
        working-directory: ./terraform
      - id: tf-workspace
        run: |
          terraform workspace list
          if [ -z "$(terraform workspace list | grep $FLY_APP_NAME$ )" ]; then
            terraform workspace new $FLY_APP_NAME
          else
            terraform workspace select $FLY_APP_NAME
          fi
        working-directory: ./terraform

      # this clunk is here because fly doesn't have a primary region concept -- https://github.com/superfly/litefs/issues/259#issuecomment-1386368570
      - id: first-apply-deploy
        run: |
          if [ $(flyctl status --json | jq ".Status") != '"running"' ]; then
            TF_VAR_fly_regions="["$FLY_PRIMARY_REGION"]""
            export TF_VAR_fly_regions
            terraform apply -auto-approve -input=false
            flyctl deploy
            echo "FIRST_APPLY=yes" >> $GITHUB_ENV
          fi

      - id: tf-apply
        run: |
          TF_VAR_fly_regions="[$FLY_REGIONS]"
          export TF_VAR_fly_regions
          echo "TF_VAR_fly_regions=$TF_VAR_fly_regions" >> $GITHUB_ENV
          terraform apply -auto-approve -input=false
        working-directory: ./terraform

      - id: deploy
        run: |
          if [ -z $FIRST_APPLY ]; then
            flyctl deploy
          fi

      # scale to other regions
      - id: scale-out
        run: flyctl scale count 3 --max-per-region 1

      - id: tf-plan-production
        if: github.event_name == 'pull_request'
        run: |
          # cleanup the FLY_APP_NAME we polluted earlier
          HYPHENS=$(echo "$FLY_APP_NAME" | tr -cd '-' | wc -c)
          FLY_APP_NAME=$(echo "$FLY_APP_NAME" | cut -d'-' -f1-$HYPHENS) 

          # rerun the envsubst
          envsubst < terraform.tfvars.template | tee terraform.tfvars

          # hack around initial workspace loss
          if [ -z "$(terraform workspace list | grep $FLY_APP_NAME$ )" ]; then
            terraform workspace new $FLY_APP_NAME
          else
            terraform workspace select $FLY_APP_NAME
          fi
          terraform plan -no-color -input=false
        working-directory: ./terraform
